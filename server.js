'use strict';

// подключаем вебсокеты
const WebSocket = require('ws');
// устанавливаем порт для соединения 9000
// process.env.PORT - автоматическое определение порта на облочных серверах
const usedPort = process.env.PORT || 9000;

// начинаем слушать сообщения по установленному порту
const socketServer = new WebSocket.Server({ port: usedPort });

// при подключении к серверу вызываем функцию onConnect
socketServer.on('connection', onConnect);

// создаем пустой список пользователей (клиентов)
const clientsArr = [];

// класс лиента содержит его соккет и имя
class Client {
    constructor(socket) {
        this.socket = socket;
        this.name = '';
    }
}

// обраотка подключений к серверу
function onConnect(socket) {
    // новое подключение
    clientsArr.push( new Client(socket) );
    console.log(`НОВОЕ ПОДКЛЮЧЕНИЕ (${clientsArr.length} пользователей онлайн)`);
    socket.send( JSON.stringify({ side: 'SERVER', data: 'Привет!<br/>Я А-чат.<br/>Как я могу к тебе обращаться?' }) );

    // получения сообщения от пользователя
    socket.on('message', (data) => getMessage(socket, JSON.parse(data)) );

    // пользователь отключился
    socket.on('close', () => console.log(`ОТКЛЮЧЕНИЕ ПОЛЬЗОВАТЕЛЯ (${clientsArr.length} пользователей онлайн)`) );
}

// функция обработки сообщений пользователей
function getMessage(socket, socketData) {
    // находим клиента по его соккету
    const client = clientsArr.find(client => client.socket === socket);

    // если у клиента не известно имя, то записываем полученное сообщение в имя клиента и отправляем новое сообщение
    if (client.name === '') {
        client.name = socketData.data;
        socket.send( JSON.stringify({ side: 'SERVER', data: `Рад знакомству, ${client.name}!<br/>О чем поговорим?` }) );
        return;    
    }
    
    // ОБРАБОТКА СООБЩЕНИЙ ОТ ПОЛЬЗОВАТЕЛЯ

    // переводим все буквы в нижний регистр для удобства поиска ключевых слов в сообщении пользователя
    let message = socketData.data.toLowerCase();

    // если не смогли обработать сообщение - отправляем соответствующую информацию пользователю
    let answer = `К сожелению, ${client.name}, я непонимаю о чем ты.<br/>Может поговорим о чем-нибудь еще?`;

    // если в сообщении было слово ПОГОДА - перезаписываем переменную с ответом
    if (message.indexOf('погод') > -1) {
        const weathersArr = [
            'нормально, но это не везде',
            'тепло, но это не точно',
            'ветер, но не факт что в твоем регионе',
        ];
        const weather = weathersArr[ Math.floor(Math.random() * weathersArr.length) ];
        answer = `Ну смотри, сегодня будет ${weather}.<br/><br/>О чем еще поговорим, ${client.name}?`;
    }

    // если в сообщении было слово АНЕКДОТ, ШУТКА или ПРИКОЛ - перезаписываем переменную с ответом
    if (message.indexOf('анекдот') > -1
    || message.indexOf('шутка') > -1
    || message.indexOf('прикол') > -1) {
        const jokesArr = [
            'В поезде едут 3 юзера и 3 программиста. У юзеров 3 билета, у программистов 1. Заходит контроллер. Юзеры показывают билеты, программисты прячутся в туалет. Контроллер стучится в туалет, оттуда высовывается рука с билетом. Программисты едут дальше. На обратном пути. У юзеров 1 билет, у программистов ни одного. Заходит контроллер. Юзеры прячутся в туалет. Один из программистов стучит, из туалета высовывается рука с билетом. Программисты забирают билет и прячутся в соседний туалет. Юзеров ссаживают с поезда.<br/>Вывод — не всякий алгоритм, доступный программисту, доступен юзеру.',
            'Программист звонит в библиотеку:<br/>— Здравствуйте, Катю можно?<br/>— Она в архиве.<br/>— Разархивируйте ее пожалуйста. Она мне срочно нужна!',
            'Жена посылает мужа—программиста в магазин:<br/>— Купи батон. Да, и спроси, есть ли яйца. Если есть — возьми десяток.<br/>Программист приходит в магазин:<br/>— Здравствуйте, дойте один батон, пожалуйста. Ага, спасибо. А яйца у вас в продаже есть?<br/>— Есть.<br/>— Тогда, пожалуйста, ещё девять батонов пожалуйста.',
            'Работа программиста и шамана имеет много общего — оба бормочут непонятные слова, совершают непонятные действия и не могут объяснить, как оно работает.',
        ];
        const joke = jokesArr[ Math.floor(Math.random() * jokesArr.length) ];
        answer = `${joke}.<br/><br/>О чем еще поговорим, ${client.name}?`;
    }

    // отправляем сообщение пользователю
    socket.send( JSON.stringify({ side: 'SERVER', data: answer }) );
}